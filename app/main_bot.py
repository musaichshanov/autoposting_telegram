# app/main_bot.py
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, StateFilter
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramBadRequest
from dotenv import load_dotenv
from app.db import AsyncSessionLocal, init_db
from app.models import User, Channel, ChannelAdmin, Post
from sqlalchemy.future import select
from sqlalchemy import insert
from datetime import datetime, time, timedelta
from app.utils import compute_next_run_from_weekday_and_time
from zoneinfo import ZoneInfo

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(storage=MemoryStorage())

# Helpers
MAIN_TEXT = "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥–∞. –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram ‚Äî —Ç—ã —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ."

def main_menu_kb() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel")],
        [InlineKeyboardButton(text="üìù –ù–æ–≤—ã–π –ø–æ—Å—Ç", callback_data="new_post")],
        [InlineKeyboardButton(text="üìö –ú–æ–∏ –∫–∞–Ω–∞–ª—ã", callback_data="my_channels")],
    ])

def channel_display_name(ch: Channel) -> str:
    return ch.title or (f"@{ch.username}" if ch.username else str(ch.chat_id))

async def safe_edit_message_text(msg: types.Message, text: str, kb: InlineKeyboardMarkup | None = None):
    try:
        await msg.edit_text(text, reply_markup=kb)
    except TelegramBadRequest:
        sent = await bot.send_message(chat_id=msg.chat.id, text=text, reply_markup=kb)
        try:
            await msg.delete()
        except Exception:
            pass

class NewPost(StatesGroup):
    choose_channel = State()
    choose_week = State()
    choose_weekday = State()
    choose_time = State()
    input_text = State()
    input_media = State()
    ask_button = State()
    input_button = State()
    choose_parse = State()
    preview = State()

class ManageAdmins(StatesGroup):
    wait_input = State()

async def ensure_user(telegram_id:int, name:str=None):
    async with AsyncSessionLocal() as session:
        q = await session.execute(select(User).where(User.telegram_id==telegram_id))
        u = q.scalar_one_or_none()
        if not u:
            u = User(telegram_id=telegram_id, name=name)
            session.add(u)
            await session.commit()
        return u

@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message, state: FSMContext):
    await ensure_user(message.from_user.id, message.from_user.full_name)
    await message.answer(MAIN_TEXT, reply_markup=main_menu_kb())

@dp.callback_query(lambda c: c.data=="back_start")
async def cb_back_start(cq: types.CallbackQuery):
    await cq.message.edit_text(MAIN_TEXT, reply_markup=main_menu_kb())
    await cq.answer()

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (–ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ @username)
@dp.callback_query(lambda c: c.data=="add_channel")
async def cb_add_channel(cq: types.CallbackQuery):
    await cq.message.answer("–ü–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ (–±–æ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º) –∏–ª–∏ –≤–≤–µ–¥–∏ @username –∫–∞–Ω–∞–ª–∞.")
    await cq.answer()

# –ú–æ–∏ –∫–∞–Ω–∞–ª—ã ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –∫–Ω–æ–ø–∫–∞–º–∏
@dp.callback_query(lambda c: c.data=="my_channels")
async def cb_my_channels(cq: types.CallbackQuery):
    await ensure_user(cq.from_user.id, cq.from_user.full_name)
    async with AsyncSessionLocal() as session:
        owner_res = await session.execute(select(Channel).where(Channel.owner_id == cq.from_user.id))
        owner_channels = owner_res.scalars().all()
        admin_res = await session.execute(
            select(Channel).join(ChannelAdmin, ChannelAdmin.channel_id == Channel.id)
            .where(ChannelAdmin.telegram_id == cq.from_user.id)
        )
        admin_channels = admin_res.scalars().all()
        seen_ids, channels = set(), []
        for ch in owner_channels + admin_channels:
            if ch.id not in seen_ids:
                seen_ids.add(ch.id)
                channels.append(ch)
        if not channels:
            await cq.message.edit_text("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤. –ù–∞–∂–º–∏ ‚Äò–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª‚Äô.", reply_markup=main_menu_kb())
        else:
            rows = []
            for ch in channels:
                title = channel_display_name(ch)
                rows.append([InlineKeyboardButton(text=title, callback_data=f"open_channel:{ch.id}")])
            rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_start")])
            kb = InlineKeyboardMarkup(inline_keyboard=rows)
            await cq.message.edit_text("–í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª:", reply_markup=kb)
    await cq.answer()

# –ü–æ–¥–º–µ–Ω—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ (+ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–∏–∫–ª–∞)
@dp.callback_query(lambda c: c.data and c.data.startswith("open_channel:"))
async def cb_open_channel(cq: types.CallbackQuery):
    _, ch_id_str = cq.data.split(":", 1)
    ch_id = int(ch_id_str)
    async with AsyncSessionLocal() as session:
        res = await session.execute(select(Channel).where(Channel.id == ch_id))
        ch = res.scalar_one_or_none()
        if not ch:
            await cq.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        title = channel_display_name(ch)
        text = (f"–ö–∞–Ω–∞–ª: {title}\n"
                f"–¶–∏–∫–ª (–Ω–µ–¥–µ–ª–∏): {ch.cycle_weeks}\n")
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data=f"confirm_del_channel:{ch.id}")],
            [InlineKeyboardButton(text="üë§ –ê–¥–º–∏–Ω—ã", callback_data=f"manage_admins:{ch.id}")],
            [InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–∏–∫–ª–∞", callback_data=f"cycle_settings:{ch.id}")],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="my_channels")],
        ])
        await cq.message.edit_text(text, reply_markup=kb)
    await cq.answer()

@dp.callback_query(lambda c: c.data and c.data.startswith("cycle_settings:"))
async def cb_cycle_settings(cq: types.CallbackQuery):
    ch_id = int(cq.data.split(":",1)[1])
    async with AsyncSessionLocal() as session:
        res = await session.execute(select(Channel).where(Channel.id==ch_id))
        ch = res.scalar_one_or_none()
        if not ch:
            await cq.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        # —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç –º–µ–Ω—è—Ç—å —Ü–∏–∫–ª
        if ch.owner_id != cq.from_user.id:
            await cq.answer("–ò–∑–º–µ–Ω—è—Ç—å —Ü–∏–∫–ª –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü", show_alert=True)
            return
        rows = []
        for i in range(1, 9):
            mark = " ‚úÖ" if ch.cycle_weeks == i else ""
            rows.append([InlineKeyboardButton(text=f"{i} –Ω–µ–¥–µ–ª—å{mark}", callback_data=f"set_weeks:{ch_id}:{i}")])
        rows.append([InlineKeyboardButton(text="–°–±—Ä–æ—Å–∏—Ç—å —Å—Ç–∞—Ä—Ç —Ü–∏–∫–ª–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data=f"reset_cycle_start:{ch_id}")])
        rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"open_channel:{ch_id}")])
        kb = InlineKeyboardMarkup(inline_keyboard=rows)
        await cq.message.edit_text(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–∏–∫–ª–∞ (—Å–µ–π—á–∞—Å {ch.cycle_weeks} –Ω–µ–¥–µ–ª—å):", reply_markup=kb)
    await cq.answer()

@dp.callback_query(lambda c: c.data and c.data.startswith("set_weeks:"))
async def cb_set_weeks(cq: types.CallbackQuery):
    _, ch_id_str, weeks_str = cq.data.split(":", 2)
    ch_id, weeks = int(ch_id_str), int(weeks_str)
    async with AsyncSessionLocal() as session:
        res = await session.execute(select(Channel).where(Channel.id==ch_id))
        ch = res.scalar_one_or_none()
        if not ch:
            await cq.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        if ch.owner_id != cq.from_user.id:
            await cq.answer("–ò–∑–º–µ–Ω—è—Ç—å —Ü–∏–∫–ª –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü", show_alert=True)
            return
        ch.cycle_weeks = max(1, min(weeks, 52))
        await session.commit()
    await cq.answer("–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    await cb_cycle_settings(cq)

@dp.callback_query(lambda c: c.data and c.data.startswith("reset_cycle_start:"))
async def cb_reset_cycle_start(cq: types.CallbackQuery):
    ch_id = int(cq.data.split(":",1)[1])
    async with AsyncSessionLocal() as session:
        res = await session.execute(select(Channel).where(Channel.id==ch_id))
        ch = res.scalar_one_or_none()
        if not ch:
            await cq.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        if ch.owner_id != cq.from_user.id:
            await cq.answer("–ò–∑–º–µ–Ω—è—Ç—å —Ü–∏–∫–ª –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü", show_alert=True)
            return
        from datetime import datetime
        ch.cycle_start = datetime.utcnow()
        await session.commit()
    await cq.answer("–°—Ç–∞—Ä—Ç —Ü–∏–∫–ª–∞ —Å–±—Ä–æ—à–µ–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
    await cb_cycle_settings(cq)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query(lambda c: c.data and c.data.startswith("confirm_del_channel:"))
async def cb_confirm_delete(cq: types.CallbackQuery):
    _, ch_id_str = cq.data.split(":", 1)
    ch_id = int(ch_id_str)
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"delete_channel:{ch_id}")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data=f"open_channel:{ch_id}")],
    ])
    await cq.message.edit_text("–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.", reply_markup=kb)
    await cq.answer()

# –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
@dp.callback_query(lambda c: c.data and (c.data.startswith("delete_channel:") or c.data.startswith("del_channel:")))
async def cb_delete_channel(cq: types.CallbackQuery):
    _, ch_id_str = cq.data.split(":", 1)
    ch_id = int(ch_id_str)

    async with AsyncSessionLocal() as session:
        res = await session.execute(select(Channel).where(Channel.id == ch_id))
        ch = res.scalar_one_or_none()
        if not ch:
            await cq.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        if ch.owner_id != cq.from_user.id:
            await cq.answer("–£–¥–∞–ª—è—Ç—å –∫–∞–Ω–∞–ª –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü", show_alert=True)
            return
        await session.delete(ch)
        await session.commit()
    await cq.message.edit_text("–ö–∞–Ω–∞–ª —É–¥–∞–ª—ë–Ω. –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É‚Ä¶")
    await cb_my_channels(cq)

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏: —Å–ø–∏—Å–æ–∫ + –∫–Ω–æ–ø–∫–∏
@dp.callback_query(lambda c: c.data and c.data.startswith("manage_admins:"))
async def cb_manage_admins(cq: types.CallbackQuery, state: FSMContext):
    _, ch_id_str = cq.data.split(":", 1)
    ch_id = int(ch_id_str)
    async with AsyncSessionLocal() as session:
        res = await session.execute(select(Channel).where(Channel.id == ch_id))
        ch = res.scalar_one_or_none()
        if not ch:
            await cq.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        if ch.owner_id != cq.from_user.id:
            await cq.answer("–£–ø—Ä–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü", show_alert=True)
            return
        # —Å–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
        admins_res = await session.execute(select(ChannelAdmin).where(ChannelAdmin.channel_id == ch_id))
        admins = admins_res.scalars().all()
        title = channel_display_name(ch)
        lines = [f"–ê–¥–º–∏–Ω—ã –∫–∞–Ω–∞–ª–∞: {title}"]
        rows = []
        if admins:
            for a in admins:
                lines.append(f"‚Ä¢ {a.telegram_id}")
                rows.append([InlineKeyboardButton(text=f"‚ùå –£–¥–∞–ª–∏—Ç—å {a.telegram_id}", callback_data=f"remove_admin:{ch_id}:{a.telegram_id}")])
        else:
            lines.append("–ü–æ–∫–∞ –Ω–∏–∫–æ–≥–æ –Ω–µ—Ç.")
        rows.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data=f"add_admin:{ch_id}")])
        rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"open_channel:{ch_id}")])
        kb = InlineKeyboardMarkup(inline_keyboard=rows)
        await cq.message.edit_text("\n".join(lines), reply_markup=kb)
    await cq.answer()

# –ö–Ω–æ–ø–∫–∞ –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ‚Äî –ø—Ä–æ—Å–∏–º –≤–≤–æ–¥
@dp.callback_query(lambda c: c.data and c.data.startswith("add_admin:"))
async def cb_add_admin(cq: types.CallbackQuery, state: FSMContext):
    _, ch_id_str = cq.data.split(":", 1)
    ch_id = int(ch_id_str)
    await state.set_state(ManageAdmins.wait_input)
    await state.update_data(admin_channel_id=ch_id)
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data=f"manage_admins:{ch_id}")]])
    await cq.message.edit_text("–ü—Ä–∏—à–ª–∏ Telegram ID, @username –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", reply_markup=kb)
    await cq.answer()

# –ü—Ä–∏—ë–º –≤–≤–æ–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
@dp.message(StateFilter(ManageAdmins.wait_input))
async def on_admin_input(message: types.Message, state: FSMContext):
    data = await state.get_data()
    ch_id = data.get("admin_channel_id")
    if not ch_id:
        await state.clear()
        await message.answer("–°–µ—Å—Å–∏—è —Å–±—Ä–æ—à–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º telegram_id
    new_admin_id = None
    # 1) –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.forward_from:
        new_admin_id = message.forward_from.id
    # 2) —Ç–µ–∫—Å—Ç
    elif message.text:
        txt = message.text.strip()
        if txt.startswith("@"):
            try:
                chat = await bot.get_chat(txt)
                if chat.type == "private":
                    new_admin_id = chat.id
            except Exception:
                pass
        elif txt.lstrip("-").isdigit():
            try:
                new_admin_id = int(txt)
            except Exception:
                new_admin_id = None

    if not new_admin_id:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏—à–ª–∏ @username, ID –∏–ª–∏ –ø–µ—Ä–µ—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    async with AsyncSessionLocal() as session:
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞
        res = await session.execute(select(Channel).where(Channel.id == ch_id))
        ch = res.scalar_one_or_none()
        if not ch:
            await state.clear()
            await message.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        if ch.owner_id != message.from_user.id:
            await state.clear()
            await message.answer("–î–æ–±–∞–≤–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü.")
            return
        if new_admin_id == ch.owner_id:
            await message.answer("–í–ª–∞–¥–µ–ª–µ—Ü —É–∂–µ –∏–º–µ–µ—Ç –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø.")
            return
        # —Å–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        await ensure_user(new_admin_id)
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ
        exists_res = await session.execute(
            select(ChannelAdmin).where(ChannelAdmin.channel_id == ch_id, ChannelAdmin.telegram_id == new_admin_id)
        )
        if exists_res.scalar_one_or_none():
            await message.answer("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω.")
        else:
            session.add(ChannelAdmin(channel_id=ch_id, telegram_id=new_admin_id))
            await session.commit()
            await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω.")

    await state.clear()
    # –ü–æ–¥—Å–∫–∞–∂–µ–º –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–æ–≤
    await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–æ–±–∞–≤–ª–µ–Ω. –û—Ç–∫—Ä–æ–π ‚Äò–ê–¥–º–∏–Ω—ã‚Äô –µ—â—ë —Ä–∞–∑ –∏–∑ –º–µ–Ω—é –∫–∞–Ω–∞–ª–∞.")

# –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.callback_query(lambda c: c.data and c.data.startswith("remove_admin:"))
async def cb_remove_admin(cq: types.CallbackQuery):
    _, rest = cq.data.split(":", 1)
    ch_id_str, tg_id_str = rest.split(":", 1)
    ch_id = int(ch_id_str)
    tg_id = int(tg_id_str)
    async with AsyncSessionLocal() as session:
        res = await session.execute(select(Channel).where(Channel.id == ch_id))
        ch = res.scalar_one_or_none()
        if not ch:
            await cq.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        if ch.owner_id != cq.from_user.id:
            await cq.answer("–£–¥–∞–ª—è—Ç—å –∞–¥–º–∏–Ω–æ–≤ –º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü", show_alert=True)
            return
        adm_res = await session.execute(select(ChannelAdmin).where(ChannelAdmin.channel_id == ch_id, ChannelAdmin.telegram_id == tg_id))
        adm = adm_res.scalar_one_or_none()
        if not adm:
            await cq.answer("–¢–∞–∫–æ–≥–æ –∞–¥–º–∏–Ω–∞ –Ω–µ—Ç", show_alert=True)
            return
        await session.delete(adm)
        await session.commit()
    await cq.answer("–£–¥–∞–ª—ë–Ω")
    await cb_manage_admins(cq, FSMContext(storage=None, key=None))

@dp.message(StateFilter(None))
async def catch_channel(message: types.Message, state: FSMContext):
    # if forwarded from channel:
    if message.forward_from_chat and message.forward_from_chat.type == "channel":
        ch = message.forward_from_chat
        async with AsyncSessionLocal() as session:
            # find or create user
            await ensure_user(message.from_user.id, message.from_user.full_name)
            res = await session.execute(select(Channel).where(Channel.chat_id==ch.id))
            exists = res.scalar_one_or_none()
            if not exists:
                new = Channel(chat_id=ch.id, username=ch.username, title=ch.title or ch.username, owner_id=message.from_user.id)
                session.add(new)
                await session.commit()
                kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–∏–∫–ª", callback_data=f"cycle_settings:{new.id}")]])
                await message.reply(f"–ö–∞–Ω–∞–ª {ch.title} –¥–æ–±–∞–≤–ª–µ–Ω –∏ —Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.", reply_markup=kb)
            else:
                await message.reply("–ö–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
        return
    # if text @username:
    if message.text and message.text.startswith("@"):
        uname = message.text.strip()
        try:
            info = await bot.get_chat(uname)
            async with AsyncSessionLocal() as session:
                await ensure_user(message.from_user.id, message.from_user.full_name)
                res = await session.execute(select(Channel).where(Channel.chat_id==info.id))
                exists = res.scalar_one_or_none()
                if not exists:
                    new = Channel(chat_id=info.id, username=info.username, title=info.title or info.username, owner_id=message.from_user.id)
                    session.add(new)
                    await session.commit()
                    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–∏–∫–ª", callback_data=f"cycle_settings:{new.id}")]])
                    await message.reply(f"–ö–∞–Ω–∞–ª {info.title} –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=kb)
                else:
                    await message.reply("–ö–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
        except Exception as e:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø.")
        return
    # else ignore other messages (or handle FSM flows)

# –°—Ç–∞—Ä—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞
@dp.callback_query(lambda c: c.data=="new_post")
async def cb_new_post(cq: types.CallbackQuery, state: FSMContext):
    await ensure_user(cq.from_user.id, cq.from_user.full_name)
    # –ø–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞, –≥–¥–µ —é–∑–µ—Ä –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –∞–¥–º–∏–Ω
    async with AsyncSessionLocal() as session:
        owner_res = await session.execute(select(Channel).where(Channel.owner_id == cq.from_user.id))
        owner_channels = owner_res.scalars().all()
        admin_res = await session.execute(
            select(Channel).join(ChannelAdmin, ChannelAdmin.channel_id == Channel.id)
            .where(ChannelAdmin.telegram_id == cq.from_user.id)
        )
        admin_channels = admin_res.scalars().all()
        seen, channels = set(), []
        for ch in owner_channels + admin_channels:
            if ch.id not in seen:
                seen.add(ch.id)
                channels.append(ch)
    if not channels:
        await cq.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤", show_alert=True)
        return
    rows = [[InlineKeyboardButton(text=channel_display_name(ch), callback_data=f"np_ch:{ch.id}")]
            for ch in channels]
    rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_start")])
    kb = InlineKeyboardMarkup(inline_keyboard=rows)
    await state.set_state(NewPost.choose_channel)
    await cq.message.edit_text("–í—ã–±–µ—Ä–∏ –∫–∞–Ω–∞–ª:", reply_markup=kb)
    await cq.answer()

@dp.callback_query(lambda c: c.data and c.data.startswith("np_ch:"), StateFilter(NewPost.choose_channel))
async def np_choose_channel(cq: types.CallbackQuery, state: FSMContext):
    ch_id = int(cq.data.split(":",1)[1])
    await state.update_data(ch_id=ch_id)
    # —Å–ø—Ä–æ—Å–∏—Ç—å –Ω–µ–¥–µ–ª—é —Ü–∏–∫–ª–∞
    async with AsyncSessionLocal() as session:
        res = await session.execute(select(Channel).where(Channel.id==ch_id))
        ch = res.scalar_one_or_none()
    weeks = ch.cycle_weeks or 1
    rows = [[InlineKeyboardButton(text=f"–ù–µ–¥–µ–ª—è {i+1}", callback_data=f"np_week:{i}")] for i in range(weeks)]
    kb = InlineKeyboardMarkup(inline_keyboard=rows + [[InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="new_post")]])
    await state.set_state(NewPost.choose_week)
    await cq.message.edit_text("–í—ã–±–µ—Ä–∏ –Ω–µ–¥–µ–ª—é –≤ —Ü–∏–∫–ª–µ:", reply_markup=kb)
    await cq.answer()

@dp.callback_query(lambda c: c.data and c.data.startswith("np_week:"), StateFilter(NewPost.choose_week))
async def np_choose_week(cq: types.CallbackQuery, state: FSMContext):
    week = int(cq.data.split(":",1)[1])
    await state.update_data(week=week)
    # –≤—ã–±—Ä–∞—Ç—å –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ —Å –æ—Ç–º–µ—Ç–∫–∞–º–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ—Å—Ç–æ–≤
    weekdays = ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"]
    data = await state.get_data()
    ch_id = data.get("ch_id")
    existing_days = set()
    async with AsyncSessionLocal() as session:
        from .models import Post
        res = await session.execute(select(Post.weekday).where(Post.channel_id==ch_id, Post.week_in_cycle==week))
        for (wd,) in res.all():
            if wd is not None:
                existing_days.add(int(wd))
    rows = []
    for i in range(7):
        mark = " ‚Ä¢" if i in existing_days else ""
        rows.append([InlineKeyboardButton(text=f"{weekdays[i]}{mark}", callback_data=f"np_wd:{i}")])
    kb = InlineKeyboardMarkup(inline_keyboard=rows + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–µ–¥–µ–ª–∏", callback_data="new_post")]])
    await state.set_state(NewPost.choose_weekday)
    await cq.message.edit_text("–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:", reply_markup=kb)
    await cq.answer()

# –ù–∞–∑–∞–¥ –∫ –Ω–µ–¥–µ–ª—è–º –∏–∑ —ç–∫—Ä–∞–Ω–∞ –¥–Ω—è
@dp.callback_query(lambda c: c.data and c.data.startswith("np_week:"), StateFilter(NewPost.choose_weekday))
async def np_back_to_weeks(cq: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    ch_id = data.get("ch_id")
    if not ch_id:
        await cq.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞", show_alert=True)
        return
    async with AsyncSessionLocal() as session:
        res = await session.execute(select(Channel).where(Channel.id==ch_id))
        ch = res.scalar_one_or_none()
    weeks = (ch.cycle_weeks or 1) if ch else 1
    rows = [[InlineKeyboardButton(text=f"–ù–µ–¥–µ–ª—è {i+1}", callback_data=f"np_week:{i}")] for i in range(weeks)]
    kb = InlineKeyboardMarkup(inline_keyboard=rows + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ö–∞–Ω–∞–ª—ã", callback_data="new_post")]])
    await state.set_state(NewPost.choose_week)
    await cq.message.edit_text("–í—ã–±–µ—Ä–∏ –Ω–µ–¥–µ–ª—é –≤ —Ü–∏–∫–ª–µ:", reply_markup=kb)
    await cq.answer()

@dp.callback_query(lambda c: c.data and c.data.startswith("np_wd:"), StateFilter(NewPost.choose_weekday))
async def np_choose_weekday(cq: types.CallbackQuery, state: FSMContext):
    wd = int(cq.data.split(":",1)[1])
    await state.update_data(weekday=wd)
    data = await state.get_data()
    ch_id = data.get("ch_id")
    week = data.get("week")
    # –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã –¥–ª—è –¥–Ω—è
    async with AsyncSessionLocal() as session:
        from .models import Post
        res = await session.execute(
            select(Post).where(Post.channel_id==ch_id, Post.week_in_cycle==week, Post.weekday==wd).order_by(Post.created_at.asc())
        )
        posts = res.scalars().all()
    weekdays = ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"]
    if posts:
        await render_day_posts_menu(cq.message, ch_id, week, wd)
    else:
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"np_week:{week}")]])
        await state.set_state(NewPost.choose_time)
        await cq.message.edit_text("–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–ú–°–ö)", reply_markup=kb)
    await cq.answer()

# –ù–∞–∑–∞–¥ –∏–∑ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏: –ø–æ–¥–¥–µ—Ä–∂–∏–º –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –¥–Ω–µ–π –∏–ª–∏ –Ω–µ–¥–µ–ª—å
@dp.callback_query(lambda c: c.data and (c.data.startswith("np_week:") or c.data.startswith("np_wd:")), StateFilter(NewPost.choose_time))
async def np_back_from_time(cq: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    ch_id = data.get("ch_id")
    week = data.get("week")
    if cq.data.startswith("np_wd:"):
        wd = int(cq.data.split(":",1)[1])
        await state.set_state(NewPost.choose_weekday)
        await state.update_data(weekday=wd)
        await render_day_posts_menu(cq.message, ch_id, week, wd)
    else:
        # –Ω–∞–∑–∞–¥ –∫ –Ω–µ–¥–µ–ª—è–º
        async with AsyncSessionLocal() as session:
            res = await session.execute(select(Channel).where(Channel.id==ch_id))
            ch = res.scalar_one_or_none()
        weeks = (ch.cycle_weeks or 1) if ch else 1
        rows = [[InlineKeyboardButton(text=f"–ù–µ–¥–µ–ª—è {i+1}", callback_data=f"np_week:{i}")] for i in range(weeks)]
        kb = InlineKeyboardMarkup(inline_keyboard=rows + [[InlineKeyboardButton(text="‚¨ÖÔ∏è –ö–∞–Ω–∞–ª—ã", callback_data="new_post")]])
        await state.set_state(NewPost.choose_week)
        await cq.message.edit_text("–í—ã–±–µ—Ä–∏ –Ω–µ–¥–µ–ª—é –≤ —Ü–∏–∫–ª–µ:", reply_markup=kb)
    await cq.answer()

# –ö–Ω–æ–ø–∫–∞: –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
@dp.callback_query(lambda c: c.data and c.data.startswith("np_add:"), StateFilter(NewPost.choose_weekday))
async def np_add_new_post(cq: types.CallbackQuery, state: FSMContext):
    wd = int(cq.data.split(":",1)[1])
    data = await state.get_data()
    week = data.get("week")
    await state.update_data(weekday=wd)
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"np_wd:{wd}")]])
    await state.set_state(NewPost.choose_time)
    await cq.message.edit_text("–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–ú–°–ö)", reply_markup=kb)
    await cq.answer()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Å—Ç–∞
@dp.callback_query(lambda c: c.data and c.data.startswith("np_view:"), StateFilter(NewPost.choose_weekday))
async def np_view_post(cq: types.CallbackQuery, state: FSMContext):
    post_id = int(cq.data.split(":",1)[1])
    async with AsyncSessionLocal() as session:
        from .models import Post
        res = await session.execute(select(Post).where(Post.id==post_id))
        p = res.scalar_one_or_none()
    if not p:
        await cq.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    await state.update_data(weekday=p.weekday, week=p.week_in_cycle, ch_id=p.channel_id)
    # –í—Ä–µ–º—è (–ú–°–ö)
    try:
        from zoneinfo import ZoneInfo
        if p.next_run:
            local_dt = (p.next_run if p.next_run.tzinfo else p.next_run.replace(tzinfo=ZoneInfo("UTC"))).astimezone(ZoneInfo("Europe/Moscow"))
            when_str = local_dt.strftime("%d.%m.%Y %H:%M (–ú–°–ö)")
        else:
            when_str = "–Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω"
    except Exception:
        when_str = "–Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω"

    kb_manage = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"np_start_edit:{p.id}")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f"np_del_confirm:{p.id}")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"np_wd:{p.weekday}")],
    ])
    # –ø–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º entities –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    entities = None
    if p.text_entities:
        try:
            from aiogram.types import MessageEntity
            entities = [MessageEntity(**e) for e in p.text_entities]
        except Exception:
            entities = None
    try:
        await cq.message.delete()
    except Exception:
        pass
    if p.media_group:
        # –æ—Ç–ø—Ä–∞–≤–∏–º –∞–ª—å–±–æ–º, –ø–æ—Ç–æ–º –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Ç–µ–∫—Å—Ç —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        from aiogram.types import InputMediaPhoto, InputMediaVideo, InputMediaDocument
        media = []
        for it in p.media_group:
            t = it.get("type")
            fid = it.get("file_id")
            if t == "photo":
                media.append(InputMediaPhoto(media=fid))
            elif t == "video":
                media.append(InputMediaVideo(media=fid))
            elif t == "document":
                media.append(InputMediaDocument(media=fid))
        if media:
            await bot.send_media_group(chat_id=cq.message.chat.id, media=media)
        text_preview = p.text or "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã"
        await bot.send_message(chat_id=cq.message.chat.id, text=text_preview, entities=entities, reply_markup=kb_manage)
    elif p.media_type == "photo":
        await bot.send_photo(chat_id=cq.message.chat.id, photo=p.media_file_id, caption=p.text, caption_entities=entities, reply_markup=kb_manage)
    elif p.media_type == "video":
        await bot.send_video(chat_id=cq.message.chat.id, video=p.media_file_id, caption=p.text, caption_entities=entities, reply_markup=kb_manage)
    elif p.media_type == "document":
        await bot.send_document(chat_id=cq.message.chat.id, document=p.media_file_id, caption=p.text, caption_entities=entities, reply_markup=kb_manage)
    elif p.media_type == "video_note":
        await bot.send_video_note(chat_id=cq.message.chat.id, video_note=p.media_file_id)
        await bot.send_message(chat_id=cq.message.chat.id, text=(p.text or "–ö—Ä—É–∂–æ–∫."), entities=entities, reply_markup=kb_manage)
    else:
        await bot.send_message(chat_id=cq.message.chat.id, text=(p.text or "–ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"), entities=entities, reply_markup=kb_manage)
    await cq.answer()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞
@dp.callback_query(lambda c: c.data and c.data.startswith("np_del_confirm:"), StateFilter(NewPost.choose_weekday))
async def np_del_confirm(cq: types.CallbackQuery, state: FSMContext):
    post_id = int(cq.data.split(":",1)[1])
    async with AsyncSessionLocal() as session:
        from .models import Post
        res = await session.execute(select(Post).where(Post.id==post_id))
        p = res.scalar_one_or_none()
    if not p:
        await cq.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    rows = [
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"np_del:{post_id}")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞", callback_data=f"np_view:{post_id}")],
    ]
    await safe_edit_message_text(cq.message, "–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–æ—Å—Ç?", InlineKeyboardMarkup(inline_keyboard=rows))
    await cq.answer()

# –ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
@dp.callback_query(lambda c: c.data and c.data.startswith("np_start_edit:"))
async def np_start_edit(cq: types.CallbackQuery, state: FSMContext):
    post_id = int(cq.data.split(":",1)[1])
    await state.update_data(editing_post_id=post_id)
    # –∑–∞–≥—Ä—É–∑–∏–º –ø–æ—Å—Ç, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –∏ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    async with AsyncSessionLocal() as session:
        from .models import Post
        res = await session.execute(select(Post).where(Post.id==post_id))
        p = res.scalar_one_or_none()
    if not p:
        await cq.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    cur_time = p.time_text or "HH:MM"
    await state.set_state(NewPost.choose_time)
    await safe_edit_message_text(
        cq.message,
        f"–í–≤–µ–¥–∏ –≤—Ä–µ–º—è (–ú–°–ö), —Ç–µ–∫—É—â–µ–µ {cur_time}:",
        InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"np_wd:{p.weekday}")]])
    )
    await cq.answer()

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
@dp.callback_query(lambda c: c.data and c.data.startswith("np_del:"), StateFilter(NewPost.choose_weekday))
async def np_delete_post(cq: types.CallbackQuery, state: FSMContext):
    post_id = int(cq.data.split(":",1)[1])
    async with AsyncSessionLocal() as session:
        from .models import Post
        res = await session.execute(select(Post).where(Post.id==post_id))
        p = res.scalar_one_or_none()
        if not p:
            await cq.answer("–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        week, wd = p.week_in_cycle, p.weekday
        await session.delete(p)
        await session.commit()
    await cq.answer("–£–¥–∞–ª–µ–Ω–æ")
    # –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ—Å—Ç–æ–≤ –¥–Ω—è
    data = await state.get_data()
    ch_id = data.get("ch_id")
    week = data.get("week")
    await render_day_posts_menu(cq.message, ch_id, week, wd)

@dp.message(StateFilter(NewPost.choose_time))
async def np_input_time(message: types.Message, state: FSMContext):
    txt = (message.text or "").strip()
    try:
        hh, mm = map(int, txt.split(":"))
        assert 0 <= hh < 24 and 0 <= mm < 60
    except Exception:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏ HH:MM")
        return
    await state.update_data(time_text=f"{hh:02d}:{mm:02d}")
    await state.set_state(NewPost.input_text)
    await message.answer("–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å ‚Äò-‚Äô —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å)")

@dp.message(StateFilter(NewPost.input_text))
async def np_input_text(message: types.Message, state: FSMContext):
    # –í —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è '-' –æ—Å—Ç–∞–≤–∏—Ç —Ç–µ–∫—Å—Ç/entities –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    data = await state.get_data()
    is_edit = bool(data.get("editing_post_id"))
    if message.text == "-" and is_edit:
        text_value = None
        entities_value = None
    else:
        text_value = message.text
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º entities –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (Telegram –ø–∞—Ä—Å–∏—Ç Markdown/HTML –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        entities_value = [e.model_dump(mode="json") for e in (message.entities or [])] if hasattr(message, "entities") else None
    await state.update_data(text=text_value, text_entities=entities_value)
    await state.set_state(NewPost.input_media)
    await message.answer("–ü—Ä–∏—à–ª–∏ –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–¥–æ–∫—É–º–µ–Ω—Ç) –∏–ª–∏ ‚Äò-‚Äô —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å")

@dp.message(StateFilter(NewPost.input_media))
async def np_input_media(message: types.Message, state: FSMContext):
    media_type, media_id = None, None
    media_group = None
    if message.text and message.text.strip() == "-":
        # –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è '-' –æ—Å—Ç–∞–≤–∏—Ç –º–µ–¥–∏–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        pass
    elif message.photo:
        media_type = "photo"
        media_id = message.photo[-1].file_id
    elif message.video:
        media_type = "video"
        media_id = message.video.file_id
    elif message.document:
        media_type = "document"
        media_id = message.document.file_id
    elif message.animation:
        media_type = "document"
        media_id = message.animation.file_id
    elif message.video_note:
        # –∫—Ä—É–∂–æ–∫ ‚Äî –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ç–∏–ø, —É –Ω–µ–≥–æ –Ω–µ—Ç caption –∏ –∫–Ω–æ–ø–æ–∫
        media_type = "video_note"
        media_id = message.video_note.file_id
        await message.answer("–î–æ–±–∞–≤–ª–µ–Ω –∫—Ä—É–∂–æ–∫. –£—á—Ç–∏: –∫ –∫—Ä—É–∂–∫–∞–º –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å—å –∏ –∫–Ω–æ–ø–∫–∏.")
    elif message.media_group_id:
        # –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞: —Å–æ–±–µ—Ä—ë–º —Ñ–∞–π–ª—ã –∏–∑ –∞–ª—å–±–æ–º–∞
        # –≤ aiogram 3 –∞–ª—å–±–æ–º –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–µ—Ä–∏–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π; –∑–¥–µ—Å—å –º—ã —Ñ–∏–∫—Å–∏—Ä—É–µ–º –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç
        item = None
        if message.photo:
            item = {"type": "photo", "file_id": message.photo[-1].file_id}
        elif message.video:
            item = {"type": "video", "file_id": message.video.file_id}
        elif message.document:
            item = {"type": "document", "file_id": message.document.file_id}
        if item:
            cur = (await state.get_data()).get("media_group") or []
            cur.append(item)
            await state.update_data(media_group=cur)
            await message.answer("–ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞: —ç–ª–µ–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω. –û—Ç–ø—Ä–∞–≤—å –µ—â—ë —ç–ª–µ–º–µ–Ω—Ç—ã –∞–ª—å–±–æ–º–∞ –∏–ª–∏ '-' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            return
    await state.update_data(media_type=media_type, media_file_id=media_id)
    await state.set_state(NewPost.ask_button)
    buttons = (await state.get_data()).get("buttons") or []
    rows = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="np_btn_add")],
    ]
    if buttons:
        rows.append([InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="np_btn_done")])
        rows.append([InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å", callback_data="np_btn_clear")])
    else:
        rows.append([InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="np_btn_done")])
    await message.answer("–ö–Ω–æ–ø–∫–∏ –ø–æ—Å—Ç–∞:", reply_markup=InlineKeyboardMarkup(inline_keyboard=rows))

@dp.callback_query(lambda c: c.data in ("np_btn_add","np_btn_done","np_btn_clear"), StateFilter(NewPost.ask_button))
async def np_buttons_menu(cq: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    buttons = data.get("buttons") or []
    if cq.data == "np_btn_add":
        await state.set_state(NewPost.input_button)
        await cq.message.edit_text("–ü—Ä–∏—à–ª–∏ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –∏ —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏:\n–¢–µ–∫—Å—Ç\nhttps://example.com")
    elif cq.data == "np_btn_clear":
        await state.update_data(buttons=[])
        await cq.message.edit_text("–ö–Ω–æ–ø–∫–∏ –æ—á–∏—â–µ–Ω—ã. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="np_btn_add")],[InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="np_btn_done")]]))
    else:
        # –ì–æ—Ç–æ–≤–æ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        await state.set_state(NewPost.preview)
        await send_post_preview(cq.message, state)
    await cq.answer()

# –ï—Å–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –∫–Ω–æ–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–ª–∞–ª —Ç–µ–∫—Å—Ç, –∞ –Ω–µ –Ω–∞–∂–∞–ª inline ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
@dp.message(StateFilter(NewPost.ask_button))
async def np_buttons_menu_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    buttons = data.get("buttons") or []
    rows = [[InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="np_btn_add")]]
    if buttons:
        rows.append([InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="np_btn_done")])
        rows.append([InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å", callback_data="np_btn_clear")])
    else:
        rows.append([InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="np_btn_done")])
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.", reply_markup=InlineKeyboardMarkup(inline_keyboard=rows))

# –í–≤–æ–¥ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏: –¥–≤–µ —Å—Ç—Ä–æ–∫–∏ (—Ç–µ–∫—Å—Ç –∏ —Å—Å—ã–ª–∫–∞). –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫
@dp.message(StateFilter(NewPost.input_button))
async def np_input_button(message: types.Message, state: FSMContext):
    lines = (message.text or "").splitlines()
    if len(lines) < 2 or not lines[1].strip().startswith("http"):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä:\n–ó–∞–≥–æ–ª–æ–≤–æ–∫\nhttps://example.com")
        return
    text = lines[0].strip()
    url = lines[1].strip()
    data = await state.get_data()
    buttons = data.get("buttons") or []
    buttons.append({"text": text, "url": url})
    await state.update_data(buttons=buttons)
    await state.set_state(NewPost.ask_button)
    rows = [
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="np_btn_add")],
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="np_btn_done")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å", callback_data="np_btn_clear")],
    ]
    await message.answer("–ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë?", reply_markup=InlineKeyboardMarkup(inline_keyboard=rows))

async def finalize_post(message_or_message, state: FSMContext):
    data = await state.get_data()
    ch_id = data["ch_id"]
    week = data["week"]
    weekday = data["weekday"]
    time_text = data["time_text"]
    text = data.get("text")
    media_type = data.get("media_type")
    media_file_id = data.get("media_file_id")
    button_text = data.get("button_text")
    button_url = data.get("button_url")
    text_entities = data.get("text_entities")
    buttons = data.get("buttons") or None

    async with AsyncSessionLocal() as session:
        # –≤—ã—á–∏—Å–ª—è–µ–º next_run
        from datetime import datetime, time as dtime
        from .models import Channel, Post
        from .utils import compute_next_run_cycle_tz
        res = await session.execute(select(Channel).where(Channel.id == ch_id))
        ch = res.scalar_one_or_none()
        if not ch:
            await state.clear()
            await message_or_message.answer("–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        # –µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –∑–∞–≥—Ä—É–∑–∏–º —Ç–µ–∫—É—â–∏–π –ø–æ—Å—Ç
        editing_post_id = data.get("editing_post_id")
        existing = None
        if editing_post_id:
            eres = await session.execute(select(Post).where(Post.id==editing_post_id))
            existing = eres.scalar_one_or_none()
        hh, mm = map(int, time_text.split(":"))
        # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ –ú–°–ö, –≤ –ë–î —Å–æ—Ö—Ä–∞–Ω—è–µ–º UTC
        now_utc = datetime.utcnow().replace(tzinfo=ZoneInfo("UTC"))
        next_run = compute_next_run_cycle_tz(
            now_utc=now_utc,
            cycle_weeks=ch.cycle_weeks or 1,
            cycle_start_utc=ch.cycle_start if ch.cycle_start.tzinfo else ch.cycle_start.replace(tzinfo=ZoneInfo("UTC")),
            week_in_cycle=week,
            weekday=weekday,
            t_local=dtime(hh, mm),
            tz_name="Europe/Moscow",
        )
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —É–∂–µ –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è (–ú–°–ö) —Å –Ω–µ–±–æ–ª—å—à–∏–º –æ–ø–æ–∑–¥–∞–Ω–∏–µ–º, –ø–æ—à–ª—ë–º –±–ª–∏–∂–∞–π—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
        try:
            now_local = now_utc.astimezone(ZoneInfo("Europe/Moscow"))
            candidate_local = now_local.replace(hour=hh, minute=mm, second=0, microsecond=0)
            if now_local.weekday() == weekday and now_local >= candidate_local and (now_local - candidate_local) <= timedelta(minutes=15):
                next_run = now_utc + timedelta(seconds=30)
        except Exception:
            pass
        if existing:
            # —Å–ª–∏—è–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π: None –æ–∑–Ω–∞—á–∞–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –±—ã–ª–æ
            existing.text = existing.text if text is None else text
            if text_entities is not None:
                existing.text_entities = text_entities
            if media_type is not None:
                existing.media_type = media_type
                existing.media_file_id = media_file_id
            # –∫–Ω–æ–ø–∫–∞: –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏—à–ª–∞ ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ
            if button_text is not None and button_url is not None:
                existing.button_text = button_text
                existing.button_url = button_url
            if buttons is not None:
                existing.buttons = buttons
            existing.time_text = time_text
            existing.next_run = next_run
            existing.week_in_cycle = week
            existing.weekday = weekday
        else:
            post = Post(
                channel_id=ch_id,
                text=text,
                text_entities=text_entities,
                media_type=media_type,
                media_file_id=media_file_id,
                button_text=button_text,
                button_url=button_url,
                buttons=buttons,
                next_run=next_run,
                week_in_cycle=week,
                weekday=weekday,
                time_text=time_text,
                created_by=message_or_message.from_user.id,
            )
            session.add(post)
        await session.commit()
    await state.clear()
    end_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –ù–æ–≤—ã–π –ø–æ—Å—Ç", callback_data="new_post")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="back_start")],
    ])
    await message_or_message.answer("–°–ª–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=end_kb)

# –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ª–æ—Ç–∞ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
async def send_post_preview(message: types.Message, state: FSMContext):
    data = await state.get_data()
    text = data.get("text")
    text_entities = data.get("text_entities")
    media_type = data.get("media_type")
    media_file_id = data.get("media_file_id")
    media_group = data.get("media_group")
    buttons = data.get("buttons") or []

    # –°–æ–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å—Ç–∞ (–≤–Ω–µ—à–Ω–∏–µ –∫–Ω–æ–ø–∫–∏)
    rows = []
    for b in buttons:
        t = (b.get("text") or "").strip()
        u = (b.get("url") or "").strip()
        if t and u:
            rows.append([InlineKeyboardButton(text=t, url=u)])
    post_kb = InlineKeyboardMarkup(inline_keyboard=rows) if rows else None

    # Entities
    entities = None
    if text_entities:
        try:
            from aiogram.types import MessageEntity
            entities = [MessageEntity(**e) for e in text_entities]
        except Exception:
            entities = None

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º
    warn_lines = []
    if media_type == "video_note" and (text or buttons):
        warn_lines.append("–í–Ω–∏–º–∞–Ω–∏–µ: –∫ –∫—Ä—É–∂–∫–∞–º –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å—å –∏ –∫–Ω–æ–ø–∫–∏. –¢–µ–∫—Å—Ç/–∫–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω–æ.")
    if media_group and buttons:
        warn_lines.append("–í–Ω–∏–º–∞–Ω–∏–µ: —É –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –Ω–µ—Ç –∫–Ω–æ–ø–æ–∫ ‚Äî –æ–Ω–∏ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")

    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    if media_group:
        from aiogram.types import InputMediaPhoto, InputMediaVideo, InputMediaDocument
        media = []
        for it in media_group:
            t = it.get("type")
            fid = it.get("file_id")
            if t == "photo":
                media.append(InputMediaPhoto(media=fid))
            elif t == "video":
                media.append(InputMediaVideo(media=fid))
            elif t == "document":
                media.append(InputMediaDocument(media=fid))
        if media:
            await bot.send_media_group(chat_id=message.chat.id, media=media)
        if text or post_kb or warn_lines:
            extra = ("\n"+"\n".join(warn_lines)) if warn_lines else ""
            await bot.send_message(chat_id=message.chat.id, text=(text or "–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã")+extra, entities=entities, reply_markup=post_kb)
    elif media_type == "photo":
        await bot.send_photo(chat_id=message.chat.id, photo=media_file_id, caption=text, caption_entities=entities, reply_markup=post_kb)
    elif media_type == "video":
        await bot.send_video(chat_id=message.chat.id, video=media_file_id, caption=text, caption_entities=entities, reply_markup=post_kb)
    elif media_type == "document":
        await bot.send_document(chat_id=message.chat.id, document=media_file_id, caption=text, caption_entities=entities, reply_markup=post_kb)
    elif media_type == "video_note":
        await bot.send_video_note(chat_id=message.chat.id, video_note=media_file_id)
        if text or buttons or warn_lines:
            extra = ("\n"+"\n".join(warn_lines)) if warn_lines else ""
            await bot.send_message(chat_id=message.chat.id, text=(text or "–ö—Ä—É–∂–æ–∫")+extra, entities=entities)
    else:
        await bot.send_message(chat_id=message.chat.id, text=(text or "–ü–æ—Å—Ç –±–µ–∑ —Ç–µ–∫—Å—Ç–∞"), entities=entities, reply_markup=post_kb)

    # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    confirm_kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="np_preview_save")],
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="np_preview_back")],
    ])
    await bot.send_message(chat_id=message.chat.id, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç–æ—Ç —Å–ª–æ—Ç?", reply_markup=confirm_kb)

@dp.callback_query(lambda c: c.data=="np_preview_save", StateFilter(NewPost.preview))
async def np_preview_save(cq: types.CallbackQuery, state: FSMContext):
    await finalize_post(cq.message, state)
    await cq.answer()

@dp.callback_query(lambda c: c.data=="np_preview_back", StateFilter(NewPost.preview))
async def np_preview_back(cq: types.CallbackQuery, state: FSMContext):
    # –≤–µ—Ä–Ω—ë–º—Å—è –≤ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫
    await state.set_state(NewPost.ask_button)
    data = await state.get_data()
    buttons = data.get("buttons") or []
    rows = [[InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É", callback_data="np_btn_add")]]
    if buttons:
        rows.append([InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="np_btn_done")])
        rows.append([InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å", callback_data="np_btn_clear")])
    else:
        rows.append([InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="np_btn_done")])
    await cq.message.edit_text("–ö–Ω–æ–ø–∫–∏ –ø–æ—Å—Ç–∞:", reply_markup=InlineKeyboardMarkup(inline_keyboard=rows))
    await cq.answer()

async def render_day_posts_menu(message: types.Message, ch_id: int, week: int, wd: int):
    async def safe_edit_message_text(msg: types.Message, text: str, kb: InlineKeyboardMarkup | None = None):
        try:
            await msg.edit_text(text, reply_markup=kb)
        except TelegramBadRequest:
            # –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–∏–∞ —Å –ø–æ–¥–ø–∏—Å—å—é ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤–æ–µ –∏ –ø–æ–ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ
            sent = await bot.send_message(chat_id=msg.chat.id, text=text, reply_markup=kb)
            try:
                await msg.delete()
            except Exception:
                pass
    async with AsyncSessionLocal() as session:
        from .models import Post
        res = await session.execute(
            select(Post)
            .where(Post.channel_id == ch_id, Post.week_in_cycle == week, Post.weekday == wd)
            .order_by(Post.created_at.asc())
        )
        posts = res.scalars().all()

    weekdays = ["–ü–Ω","–í—Ç","–°—Ä","–ß—Ç","–ü—Ç","–°–±","–í—Å"]
    if posts:
        rows = []
        for idx, p in enumerate(posts, start=1):
            rows.append([InlineKeyboardButton(text=f"–ü–æ—Å—Ç {idx}", callback_data=f"np_view:{p.id}")])
        rows.append([InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç", callback_data=f"np_add:{wd}")])
        rows.append([InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"np_week:{week}")])
        await safe_edit_message_text(message, f"{weekdays[wd]}: –≤—ã–±–µ—Ä–∏ –ø–æ—Å—Ç –∏–ª–∏ –¥–æ–±–∞–≤—å –Ω–æ–≤—ã–π", InlineKeyboardMarkup(inline_keyboard=rows))
    else:
        kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"np_week:{week}")]])
        await safe_edit_message_text(message, "–í —ç—Ç–æ–º –¥–Ω–µ –µ—â—ë –Ω–µ—Ç –ø–æ—Å—Ç–æ–≤. –ù–∞–∂–º–∏ ‚Äò‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ—Å—Ç‚Äô –Ω–∏–∂–µ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –Ω–∞–∑–∞–¥.", kb)

# –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä: –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
@dp.message()
async def add_channel_from_forward(message: types.Message, state: FSMContext):
    # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤
    if not (message.forward_from_chat and getattr(message.forward_from_chat, "type", None) == "channel"):
        return
    # –µ—Å–ª–∏ —Å–µ–π—á–∞—Å –≤–≤–æ–¥–∏–º –∞–¥–º–∏–Ω–∞ ‚Äî –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º
    cur = await state.get_state()
    if cur == ManageAdmins.wait_input:
        return
    ch = message.forward_from_chat
    async with AsyncSessionLocal() as session:
        await ensure_user(message.from_user.id, message.from_user.full_name)
        res = await session.execute(select(Channel).where(Channel.chat_id==ch.id))
        exists = res.scalar_one_or_none()
        if not exists:
            new = Channel(chat_id=ch.id, username=ch.username, title=ch.title or ch.username, owner_id=message.from_user.id)
            session.add(new)
            await session.commit()
            kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–∏–∫–ª", callback_data=f"cycle_settings:{new.id}")]])
            await message.reply(f"–ö–∞–Ω–∞–ª {ch.title} –¥–æ–±–∞–≤–ª–µ–Ω –∏ —Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–ª–∞–¥–µ–ª—å—Ü–µ–º.", reply_markup=kb)
        else:
            await message.reply("–ö–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω.")
    return

        
async def main():
    print("Starting bot...")
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
